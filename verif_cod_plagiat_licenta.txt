<Window x:Class="Soft_licenta_2.Autentificare"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Soft_licenta_2"
        mc:Ignorable="d"
        Title="Autentificare" Height="306" Width="398" FontWeight="Bold">
    <Border Background="#2612a6" CornerRadius="20" Margin="20">
        <StackPanel Margin="20">
            <Label x:Name="label_Autentificare" Content="Bine ati venit! Intrati in cont!" Foreground="White" FontSize="22" HorizontalAlignment="Center" Width="318"/>
            <Separator></Separator>
            <Label Name="label_Username" Content="Username" Foreground="White"/>
            <TextBox Name="textbox_Username" Background="#FFA500" Foreground="White" FontSize="18"/>
            <Label Name="label_Parola" Content="Parola" Foreground="White"/>
            <PasswordBox Name="textbox_Parola" Background="#FFA500" Foreground="White" FontSize="18"/>
            <Button Name="button_Autentificare"  Content="Autentificare" Margin="60 10" Background="#FFA500" Foreground="Black" FontSize="18" Width="139" Click="button_Autentificare_verifica_credentiale"/>
        </StackPanel>
    </Border>
</Window>

<Application x:Class="Soft_licenta_2.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:Soft_licenta_2"
             StartupUri="Autentificare.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace Soft_licenta_2
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
    }
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Shapes;

namespace Soft_licenta_2
{
    /// <summary>
    /// Interaction logic for Autentificare.xaml
    /// </summary>
        
public partial class Autentificare : Window
    {
        public bool verificare_utilizator = false;
        public Autentificare()
        {
            InitializeComponent();
        }
        

        private void button_Autentificare_verifica_credentiale(object sender, RoutedEventArgs e)
        {
            SqlConnection sqlCon = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Utilizatori;Integrated Security=True;");
            try
            {
                if (sqlCon.State == ConnectionState.Closed)
                    sqlCon.Open();
                SqlCommand sqlCmd = new SqlCommand("SELECT COUNT(1) FROM Utilizatori WHERE Username=@Username AND Parola=@Parola", sqlCon);
                sqlCmd.CommandType = CommandType.Text;
                sqlCmd.Parameters.AddWithValue("@Username", textbox_Username.Text);
                sqlCmd.Parameters.AddWithValue("@Parola", textbox_Parola.Password);
                int count = Convert.ToInt32(sqlCmd.ExecuteScalar());
                if (count == 1)
                {
                    if (textbox_Username.Text == "admin")
                        verificare_utilizator = true;
                    else
                        verificare_utilizator = false;

                    MainWindow aplicatie = new MainWindow(verificare_utilizator);
                    aplicatie.Show();
                    this.Close();
                }
                else
                {
                    MessageBox.Show("Username or password is incorrect.");
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                sqlCon.Close();
            }
        }
    }
}

<Window x:Class="Soft_licenta_2.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Soft_licenta_2"
        mc:Ignorable="d"
        Title="Software Financiar" Height="471" Width="934">
    <Grid>
        <Canvas>
            <Label Content="Aplicatia pentru Licenta - Software financiar specializat pe asistenta in luarea deciziilor" Canvas.Top="5" HorizontalAlignment="Left" VerticalAlignment="Center" Width="934" HorizontalContentAlignment="Center"/>
            <TabControl x:Name="tabcontrol_optiuni" Height="420" Width="935" HorizontalAlignment="Left" Canvas.Top="36" VerticalAlignment="Center">
                <TabItem x:Name="tabitem_profituri" Header="Profit">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label Content="Profitul firmei" Margin="0,21,0,334" HorizontalContentAlignment="Center" VerticalContentAlignment="Center" FontSize="16" FontWeight="Normal"/>
                        <Label x:Name="label_profit_venituri_obtinute" Content="1. Ce venituri ati obtinut?" Margin="58,111,347,255"/>
                        <TextBox x:Name="textbox_profit_venituri_obtinute" TextWrapping="Wrap" Margin="61,142,347,228" RenderTransformOrigin="0.5,0.5"/>
                        <Label x:Name="label_profit_cheltuieli_obtinute" Content="2. Ce cheltuieli ati obtinut?" Margin="61,191,333,175"/>
                        <TextBox x:Name="textbox_profit_cheltuieli_obtinute" TextWrapping="Wrap" Margin="61,222,347,148" RenderTransformOrigin="0.5,0.5"/>
                        <Button x:Name="button_profit_calculeaza_profit" Content="Calculeaza profit!" Margin="188,279,188,54" Click="calculeaza_profit" FontSize="14" FontWeight="Bold"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_amortizare_liniara" Header="Amortizare liniara" Margin="-2,-2,-2,0">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="4*"/>
                            <ColumnDefinition Width="545*"/>
                        </Grid.ColumnDefinitions>
                        <Label Content="Amortizare liniara pentru o investitie propusa" Margin="0,10,0,0" HorizontalContentAlignment="Center" VerticalAlignment="Top" VerticalContentAlignment="Center" FontSize="16" Grid.ColumnSpan="2"/>
                        <Label x:Name="label_suma_investita_amort_liniara" Content="1. Ce suma ati investit?" Margin="31,90,363,276" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Grid.Column="1"/>
                        <TextBox x:Name="textbox_suma_investita_amort_liniara" TextWrapping="Wrap" Margin="31,121,363,246" Grid.Column="1"/>
                        <Label x:Name="perioada_investita_amort_liniara_label" Content="2. Pe ce perioada (exprimata in luni de zile si &lt;= 1 an)?" Margin="31,190,216,176" HorizontalContentAlignment="Left" VerticalContentAlignment="Center" Grid.Column="1"/>
                        <TextBox x:Name="perioada_investita_amort_liniara" TextWrapping="Wrap" Margin="31,221,363,146" Grid.Column="1"/>
                        <Button x:Name="calculeaza_amortizarea_liniara" Content="Calculeaza" Margin="155,273,159,0" FontWeight="Bold" FontStyle="Normal" FontStretch="Normal" Height="58" VerticalAlignment="Top" Click="calculeaza_amort_liniara" Grid.Column="1" FontSize="14"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_amortizare_degresiva" Header="Amortizare degresiva">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label x:Name="label_titlu_amort_degresiva" Content="Amortizare degresiva" Margin="0,10,0,351" HorizontalContentAlignment="Center" VerticalAlignment="Center" VerticalContentAlignment="Center" FontSize="16"/>
                        <Label x:Name="label_suma_amort_degresiva" Content="1. Ce suma trebuie sa amortizam?" Margin="0,0,334,278" Height="28" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="191"/>
                        <TextBox x:Name="textbox_suma_amort_degresiva" TextWrapping="Wrap" Width="138" Margin="0,0,387,250" Height="23" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                        <Label x:Name="label_perioada_amort_degresiva" Content="2. Care este perioada de amoritzare (&gt;2 ani)?" Margin="0,0,268,170" Height="30" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="257"/>
                        <TextBox x:Name="textbox_perioada_amort_degresiva" TextWrapping="Wrap" Width="138" Margin="0,0,387,139" Height="26" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                        <Button Content="Calculeaza" Margin="0,0,321,24" FontWeight="Bold" Height="72" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="141" Click="calculeaza_amort_degresiva" FontSize="14"/>
                        <TextBox x:Name="textbox_amort_degresiva_rezultat" TextWrapping="Wrap" Margin="367,110,10,10"/>
                        <Label Content="Tabelul cu &#xD;&#xA;amortizarile" Margin="283,110,187,238" FontWeight="Bold"/>
                        <Label Content="An  |  Amortizare  |  Suma ramasa" Margin="362,81,0,282" FontWeight="Normal"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_dobanda_simpla" Header="Dobanda simpla" >
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label x:Name="label_titlu_dob_simpla" Content="Dobanda simpla" Margin="0,18,0,341" HorizontalContentAlignment="Center" FontSize="16"/>
                        <Label x:Name="label_suma_initiala_dob_simpla" Content="1. Ce suma initiala ati investit?" Margin="30,96,350,267"/>
                        <TextBox x:Name="dob_simpla_textbox_suma_initiala" TextWrapping="Wrap" Margin="36,125,364,236"/>
                        <Label x:Name="label_rata_dob_dob_simpla" Content="2. Ce rata a dobanzii avem?" Margin="36,196,355,166"/>
                        <TextBox x:Name="dob_simpla_textbox_rata_dob" TextWrapping="Wrap" Margin="36,231,364,134"/>
                        <Label x:Name="label_perioada_dob_simpla" Content="3. Pe ce perioada (&lt; de 1 an si exprimata in luni de zile) ati investit?" Margin="6,293,176,71"/>
                        <TextBox x:Name="dob_simpla_textbox_perioada" TextWrapping="Wrap" Margin="36,326,363,37"/>
                        <Button x:Name="buton_calculeaza_dob_simpla" Content="Calculeaza dobanda simpla" Margin="274,326,83,5" Click="calc_dob_simpla" FontSize="14" FontWeight="Bold"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_dobanda_compusa" Header="Dobanda compusa" >
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label x:Name="label_titlu_dob_compusa" Content="Dobanda simpla" Margin="10,10,10,349" HorizontalContentAlignment="Center" FontSize="16"/>
                        <Label x:Name="label_suma_initiala_dob_compusa" Content="1. Ce suma initiala ati investit?" Margin="4,107,375,256"/>
                        <TextBox x:Name="dob_compusa_textbox_suma_initiala" TextWrapping="Wrap" Margin="9,141,391,220"/>
                        <Label x:Name="label_rata_dob_dob_compusa" Content="2. Ce rata a dobanzii avem?" Margin="10,202,381,160"/>
                        <TextBox x:Name="dob_compusa_textbox_rata_dob" TextWrapping="Wrap" Margin="9,237,390,128"/>
                        <Label x:Name="label_perioada_dob_compusa" Content="3. Pe ce perioada (&gt;= 1 an) ati investit?" Margin="10,294,313,70"/>
                        <TextBox x:Name="dob_compusa_textbox_perioada" TextWrapping="Wrap" Margin="9,327,391,35"/>
                        <Button x:Name="buton_calculeaza_dob_compusa" Content="Calculeaza dobanda compusa" Margin="292,327,29,22" Click="calc_dob_compusa" FontSize="14" FontWeight="Bold"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_van" Header="VAN">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label Content="Valoarea actualizata neta" Margin="0,10,0,0" VerticalAlignment="Top" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"/>
                        <Label Content="1. Ce suma ati investit?" Margin="0,0,401,295" VerticalAlignment="Bottom" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Right" Width="148"/>
                        <TextBox Name ="textbox_van_suma_investita" TextWrapping="Wrap" Margin="0,0,420,265" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="94"/>
                        <Label Content="2. Ce rata de randament avem?" Margin="0,0,373,225" VerticalAlignment="Bottom" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Right" Width="176"/>
                        <TextBox Name ="textbox_van_rata_randament" TextWrapping="Wrap" Margin="0,0,420,196" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="94"/>
                        <Label Content="3. Pe ce perioada (ani) ati investit?" Margin="0,197,348,0" VerticalAlignment="Top" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Right" Width="201"/>
                        <TextBox x:Name="textbox_van_perioada" TextWrapping="Wrap" Margin="0,0,420,140" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="94"/>
                        <GroupBox x:Name="groupbox_van_fluxuri_bani" Header="Fluxuri de bani (Cashflow-uri)" Margin="263,71,114,95">
                            <StackPanel x:Name="stackpanel_van_fluxuri_bani"/>
                        </GroupBox>
                        <Button x:Name="button_van_introducere_cashflow" Content="Introduceti fluxurile de bani" Margin="25,272,373,70" Click="introduce_fluxuri_de_bani_van"/>
                        <Button x:Name="button_van_calc_rir" Content="Calculeaza VAN" Margin="274,327,125,15" Click="calculeaza_van" FontSize="14" FontWeight="Bold"/>
                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_rir" Header="RIR">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label Content="Rata interna de rentabilitate" Margin="0,10,0,0" VerticalAlignment="Top" VerticalContentAlignment="Center" HorizontalContentAlignment="Center"/>
                        <Label Content="1. Ce suma ati investit?" Margin="0,0,391,260" VerticalAlignment="Bottom" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Right" Width="148"/>
                        <TextBox Name ="textbox_rir_suma_investita" TextWrapping="Wrap" Margin="0,0,417,226" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="94"/>
                        <Label Content="2. Pe ce perioada (ani) ati investit?" Margin="0,196,338,0" VerticalAlignment="Top" VerticalContentAlignment="Center" HorizontalContentAlignment="Center" HorizontalAlignment="Right" Width="201"/>
                        <TextBox x:Name="textbox_rir_perioada" TextWrapping="Wrap" Margin="0,0,417,140" Height="25" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="94"/>
                        <GroupBox x:Name="groupbox_fluxuri_bani" Header="Fluxuri de bani (Cashflow-uri)" Margin="263,71,114,85">
                            <StackPanel x:Name="stackpanel_fluxuri_bani"/>
                        </GroupBox>
                        <Button x:Name="button_rir_introducere_cashflow" Content="Introduceti fluxurile de bani" Margin="35,277,338,65" Click="introduce_fluxuri_de_bani"/>
                        <Button x:Name="button_rir_calc_rir" Content="Calculeaza RIR" Margin="274,332,125,10" Click="calculeaza_rir" FontSize="14" FontWeight="Bold"/>

                    </Grid>
                </TabItem>
                <TabItem x:Name="tabitem_roi" Header="ROI">
                    <Grid Background="#FFE5E5E5" Margin="0,0,380,0">
                        <Label Content="Return on Investment&#xD;&#xA;" Margin="10,10,10,345" HorizontalContentAlignment="Center" FontSize="16" FontWeight="Bold"/>
                        <Label x:Name="suma_investita_roi_label" Content="1. Ce suma ati investit?" Margin="0,0,380,263" Visibility="Visible" Height="27" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="137"/>
                        <TextBox x:Name="suma_investita_roi" TextWrapping="Wrap" Margin="32,134,0,0" Visibility="Visible" HorizontalAlignment="Left" Width="124" Height="25" VerticalAlignment="Top"/>
                        <Label x:Name="castig_obtinut_roi_label" Content="2. Ce castig ati inregistrat?" Margin="32,215,0,0" Visibility="Visible" HorizontalAlignment="Left" Width="151" Height="27" VerticalAlignment="Top"/>
                        <TextBox x:Name="castig_obtinut_roi" TextWrapping="Wrap" Margin="0,0,393,120" Visibility="Visible" HorizontalAlignment="Right" Width="124" Height="25" VerticalAlignment="Bottom"/>
                        <Button Content="Calculeaza ROI" Click="calculeaza_roi" Height="53" VerticalAlignment="Top" HorizontalAlignment="Left" Width="179" Margin="274,307,0,0" FontSize="14" FontWeight="Bold"/>
                        <!--<Label x:Name="roi_rezultat_label" Content="ROI este:" Margin="354,166,0,0" VerticalContentAlignment="Top" HorizontalContentAlignment="Center" Visibility="Visible" HorizontalAlignment="Left" Width="84" Height="25" VerticalAlignment="Top"/>
                        <TextBox x:Name="roi_rezultat" TextWrapping="Wrap" Margin="438,166,0,0" Visibility="Visible" HorizontalAlignment="Left" Width="84" Height="25" VerticalAlignment="Top"/>-->
                    </Grid>
                </TabItem>
            </TabControl>
            <DataGrid x:Name="datagrid_date_financiare" Height="175" Width="381" d:ItemsSource="{d:SampleData ItemCount=5}" Canvas.Left="553" Canvas.Top="61" HorizontalAlignment="Center" VerticalAlignment="Top" SelectionChanged="Introdu_date_in_textboxuri"/>

            <GroupBox x:Name="groupbox_crud_label" Height="219" Header="" Width="99" Canvas.Left="553" Canvas.Top="236" HorizontalAlignment="Center" VerticalAlignment="Top" IsEnabled="False">
                <StackPanel x:Name="stackpanel_crud" Height="197" Width="85" Canvas.Left="785" Canvas.Top="250" HorizontalAlignment="Left" VerticalAlignment="Center" IsEnabled="False">
                    <Label Content="ID Informatie" Canvas.Left="569" Canvas.Top="246" HorizontalAlignment="Left" Width="81" Height="23"/>
                    <Label Content="Data" Canvas.Left="569" Canvas.Top="281" HorizontalAlignment="Left"/>
                    <Label Content="Venituri" Canvas.Left="598" Canvas.Top="309" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <Label Content="Venituri din 
                           investitii" Canvas.Left="575" Canvas.Top="339" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <Label Content="Cheltuieli" Width="66" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <Label Content="Investitii" Canvas.Left="595" Canvas.Top="396" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                    <Label Content="Descriere" Canvas.Left="650" Canvas.Top="427" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                </StackPanel>
            </GroupBox>
            <GroupBox x:Name="groupbox_crud_textbox" Height="219" Header="" Width="132" Canvas.Left="653" Canvas.Top="236" HorizontalAlignment="Center" VerticalAlignment="Top" IsEnabled="False">
                <StackPanel>
                    <TextBox x:Name="textbox_id" TextWrapping="Wrap" Width="120" Canvas.Left="654" Canvas.Top="250" HorizontalAlignment="Left" Height="26"/>
                    <TextBox x:Name="textbox_data" TextWrapping="Wrap" Width="120" Canvas.Left="609" Canvas.Top="285" HorizontalAlignment="Left" Height="24"/>
                    <TextBox x:Name="textbox_venituri" TextWrapping="Wrap" Width="120" Canvas.Left="654" Canvas.Top="312" HorizontalAlignment="Left" Height="26"/>
                    <TextBox x:Name="textbox_venituri_provenite" TextWrapping="Wrap" Width="120" Canvas.Left="698" Canvas.Top="343" HorizontalAlignment="Left" Height="27"/>
                    <TextBox x:Name="textbox_cheltuieli" TextWrapping="Wrap" Width="120" Canvas.Left="616" Canvas.Top="370" HorizontalAlignment="Left" Height="26"/>
                    <TextBox x:Name="textbox_investitie" TextWrapping="Wrap" Width="120" Canvas.Left="654" Canvas.Top="400" HorizontalAlignment="Left" Height="28"/>
                    <TextBox x:Name="textbox_descriere" TextWrapping="Wrap" Width="120" Canvas.Left="714" Canvas.Top="431" HorizontalAlignment="Left" RenderTransformOrigin="0.5,0.5" Height="28">
                    </TextBox>
                </StackPanel>
            </GroupBox>
            <GroupBox x:Name="groupbox_crud_button" Height="219" Header="" Width="149" Canvas.Left="785" Canvas.Top="236" HorizontalAlignment="Center" VerticalAlignment="Top" IsEnabled="False">
                <StackPanel>
                    <Button x:Name="button_adauga" Content="Adauga inregistrare noua" Canvas.Left="734" Canvas.Top="285" Click="Adauga_inreg" HorizontalAlignment="Center"/>
                    <Button x:Name="button_editeaza" Content="Editeaza inregistrare" Canvas.Left="744" Canvas.Top="369" HorizontalAlignment="Center" VerticalAlignment="Top" Click="Editeaza_inreg"/>
                    <Button x:Name="button_sterge" Content="Sterge inregistrare" Canvas.Left="779" Canvas.Top="398" HorizontalAlignment="Center" VerticalAlignment="Top" Click="Sterge_inreg"/>
                    <Button x:Name="button_refresh" Content="Refresh campuri" Canvas.Left="839" Canvas.Top="431" HorizontalAlignment="Center" VerticalAlignment="Top" Click="Refresh_inreg" HorizontalContentAlignment="Center"/>
                </StackPanel>
            </GroupBox>
        </Canvas>
    </Grid>
</Window>

using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;
using System.Data.SqlClient;
using System.Data.Sql;


namespace Soft_licenta_2
{
    public partial class MainWindow : Window
    {
        public float row_id = 0, rezultat = 0;
        public int i = 0;
        List<TextBox> textbox_fluxuri_bani;
        //List<Label> label_fluxuri_bani;
        public MainWindow(bool is_admin)
        {
            //Verificare true/false is_admin din fereastra autentificare.xaml
            /*String s = is_admin.ToString();
            MessageBox.Show(s);*/
            InitializeComponent();
            Incarca_Grid();
            groupbox_crud_label.IsEnabled = is_admin;
            groupbox_crud_textbox.IsEnabled = is_admin;
            groupbox_crud_button.IsEnabled = is_admin;
        }
        SqlConnection con = new SqlConnection(@"Data Source=(localdb)\MSSQLLocalDB;Initial Catalog=Istoric_financiar_4;Integrated Security=True;Connect Timeout=30;Encrypt=False;TrustServerCertificate=False;ApplicationIntent=ReadWrite;MultiSubnetFailover=False");        
        
        //CRUD
        private void Refresh_inreg(object sender, RoutedEventArgs e)
        {
            curata_date();
        }
        private void Adauga_inreg(object sender, RoutedEventArgs e)
        {
            try
            {
                if (este_valid())
                {
                    SqlCommand comanda = new SqlCommand("INSERT INTO dbo.Situatie_financiara (ID_informatie, Data, Venituri1, Venituri2, Cheltuieli, Investitii, Descriere) VALUES (@ID_informatie, @Data, @Venituri1, @Venituri2, @Cheltuieli, @Investitii, @Descriere)", con);
                    comanda.CommandType = CommandType.Text;
                    comanda.Parameters.AddWithValue("@ID_informatie", textbox_id.Text);
                    comanda.Parameters.AddWithValue("@Data", textbox_data.Text);
                    comanda.Parameters.AddWithValue("@Venituri1", textbox_venituri.Text);
                    comanda.Parameters.AddWithValue("@Venituri2", textbox_venituri_provenite.Text);
                    comanda.Parameters.AddWithValue("@Cheltuieli", textbox_cheltuieli.Text);
                    comanda.Parameters.AddWithValue("@Investitii", textbox_investitie.Text);
                    comanda.Parameters.AddWithValue("@Descriere", textbox_descriere.Text);
                    con.Open();
                    comanda.ExecuteNonQuery();
                    con.Close();
                    Incarca_Grid();
                    MessageBox.Show("Adaugarea a reusit!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);
                    curata_date();
                }
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message);
            }
        }
        private void Editeaza_inreg(object sender, RoutedEventArgs e)
        {
            con.Open();
            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET ID_Informatie = '" + textbox_id.Text +"', Data = '" + textbox_data.Text + "', Venituri1 = '" + textbox_venituri.Text + "', Venituri2 = '" + textbox_venituri_provenite.Text + "', Cheltuieli = '" + textbox_cheltuieli.Text + "', Investitii = '" + textbox_investitie.Text + "', Descriere = '" + textbox_descriere.Text + "' WHERE ID_Informatie = '" + textbox_id.Text+"' ", con);
            try
            {
                comanda.ExecuteNonQuery();
                MessageBox.Show("Editare facuta cu succes!", "Editat!", MessageBoxButton.OK, MessageBoxImage.Information);
            }
            catch (SqlException ex)
            {
                MessageBox.Show(ex.Message);
            }
            finally
            {
                con.Close();
                curata_date();
                Incarca_Grid();
            }
        }
        private void Sterge_inreg(object sender, RoutedEventArgs e)
        {
            con.Open();
            SqlCommand comanda = new SqlCommand("DELETE FROM dbo.Situatie_financiara WHERE ID_informatie = " + textbox_id.Text + " ", con);
            try
            {
                comanda.ExecuteNonQuery();
                MessageBox.Show("Inregistrarea a fost stearsa cu succes!", "Stergere efectuata", MessageBoxButton.OK, MessageBoxImage.Information);
                con.Close();
                curata_date();
                Incarca_Grid();
                con.Close();
            }
            catch (SqlException ex)
            {
                MessageBox.Show("Eroare! Stergerea nu a putut fi realizata!" + ex.Message);
            }
            finally
            {
                con.Close();
            }
        }

        //Functii extra CRUD
        public void Incarca_Grid()
        {
            SqlCommand comanda = new SqlCommand("SELECT * FROM dbo.Situatie_financiara", con);
            DataTable tabel = new DataTable();
            con.Open();
            SqlDataReader reader = comanda.ExecuteReader();
            tabel.Load(reader);
            con.Close();
            datagrid_date_financiare.ItemsSource = tabel.DefaultView;
        }
        public void curata_date()
        {
            textbox_id.Clear();
            textbox_data.Clear();
            textbox_venituri.Clear();
            textbox_venituri_provenite.Clear();
            textbox_cheltuieli.Clear();
            textbox_investitie.Clear();
            textbox_descriere.Clear();
        }
        public bool este_valid()
        {
            if (textbox_id.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci ID-ul!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_data.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Data!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_venituri.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Veniturile!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_venituri_provenite.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Veniturile provenite din investitii!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_cheltuieli.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Cheltuielile!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_investitie.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Investitiile!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            if (textbox_descriere.Text == String.Empty)
            {
                MessageBox.Show("Ai uitat sa introduci Descrierea investitiilor!", "Eroare", MessageBoxButton.OK, MessageBoxImage.Error);
                return false;
            }
            return true;
        }

        //Algoritmi si calcule
        private void calculeaza_profit(object sender, RoutedEventArgs e)
        {
            rezultat = float.Parse(textbox_profit_venituri_obtinute.Text) - float.Parse(textbox_profit_cheltuieli_obtinute.Text);
            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET Profit = @rezultat WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@rezultat", rezultat);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            if(rezultat > 0)
                MessageBox.Show("Profit inregistrat!", "Camp calculat!", MessageBoxButton.OK, MessageBoxImage.Information);
            else if (rezultat == 0)
                MessageBox.Show("Suntem pe 0 luna aceasta!", "Camp calculat!", MessageBoxButton.OK, MessageBoxImage.Information); 
            else
                MessageBox.Show("Am inregistrat pierderi :(", "Camp calculat!", MessageBoxButton.OK, MessageBoxImage.Information);
            
        }
        private void calculeaza_amort_liniara(object sender, RoutedEventArgs e)
        {
            rezultat = float.Parse(textbox_suma_investita_amort_liniara.Text) / float.Parse(perioada_investita_amort_liniara.Text);
            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET Amortizare_liniara = @rezultat WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@rezultat", rezultat);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            MessageBox.Show("Amortizarea liniara a fost inserata!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        private void calculeaza_amort_degresiva(object sender, RoutedEventArgs e)
        {
            double k = 1.5, cota_amort, suma_ramasa_amortizat, suma_amortizare_constanta, an,
                suma_amortizare_degresiva, durata_artificiu_liniara, durata_artificiu_degresiva;

            /*void parcugere_for()
            {
                durata_artificiu_degresiva = float.Parse(perioada_amort_degresiva.Text) / 2;

                for (an = 1; an <= durata_artificiu_degresiva; an++)
                {
                    suma_amortizare_degresiva = suma_ramasa_amortizat * cota_amort;
                    //.suma_ramasa_amortizat = .suma_ramasa_amortizat - .suma_amortizare_degresiva;
                    suma_ramasa_amortizat = suma_ramasa_amortizat * (1 - cota_amort);
                    Console.WriteLine(an + " | " + Math.Round(suma_amortizare_degresiva, 2) + " | " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n");
                }

                suma_amortizare_constanta = suma_ramasa_amortizat / durata_artificiu_liniara;

                for (an = durata_artificiu_degresiva + 1; an <= float.Parse(perioada_amort_degresiva.Text); an++)
                {
                    suma_ramasa_amortizat = suma_ramasa_amortizat - suma_amortizare_constanta;
                    Console.WriteLine(an + " | " + Math.Round(suma_amortizare_constanta, 2) + " | " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n");
                }
            }*/

            textbox_amort_degresiva_rezultat.Text = "";
            if (float.Parse(textbox_perioada_amort_degresiva.Text) < 2)
                System.Windows.MessageBox.Show("Ati introdus fie o perioada < 2 ani, fie o perioada eronata! Reincercati cu un numar valid!");
            /*{
                String mesaj = "Perioada trebuie sa fie > de 2 ani! Va rugam sa o reintroduceti";
                String titlu = "Alerta! Date eronate!";
                MessageBoxButton buton = MessageBoxButton.OK;
                DialogResult alerta = (DialogResult)System.Windows.MessageBox.Show(mesaj, titlu, buton);
                if (alerta == System.Windows.Forms.DialogResult.OK) //asa cred ca inseamna sa alegi o optiune, conform docs.microsoft
                {
                    perioada_amort_degresiva.Text = "";
                    //inchide message box-ul
                    this.Close();
                }
            } - aceasta optiune era foarte complicata si gresita - cel mai simplu cu un system.win.msgbox */
            /*SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET ROI = @rezultat WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@rezultat", rezultat);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            MessageBox.Show("Valoare inserata in tabel!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);*/
            else if (2 <= float.Parse(textbox_perioada_amort_degresiva.Text) && float.Parse(textbox_perioada_amort_degresiva.Text) < 5)
            {
                k = 1.5;
            }
            else if (5 <= float.Parse(textbox_perioada_amort_degresiva.Text) && float.Parse(textbox_perioada_amort_degresiva.Text) <= 10)
            {
                k = 2;
            }
            else
            {
                k = 2.5;
            }

            cota_amort = k / float.Parse(textbox_perioada_amort_degresiva.Text); //aici imi arunca exceptie
            suma_ramasa_amortizat = float.Parse(textbox_suma_amort_degresiva.Text);

            if (float.Parse(textbox_perioada_amort_degresiva.Text) % 2 == 0)
            {
                durata_artificiu_liniara = float.Parse(textbox_perioada_amort_degresiva.Text) / 2;
                //parcurgere_for();
                durata_artificiu_degresiva = float.Parse(textbox_perioada_amort_degresiva.Text) / 2;

                for (an = 1; an <= durata_artificiu_degresiva; an++)
                {
                    suma_amortizare_degresiva = suma_ramasa_amortizat * cota_amort;
                    //.suma_ramasa_amortizat = .suma_ramasa_amortizat - .suma_amortizare_degresiva;
                    suma_ramasa_amortizat = suma_ramasa_amortizat * (1 - cota_amort);
                    textbox_amort_degresiva_rezultat.Text += " " + Math.Round(an) + "  |  " + Math.Round(suma_amortizare_degresiva, 2) + "  |  " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n";
                }

                suma_amortizare_constanta = suma_ramasa_amortizat / durata_artificiu_liniara;

                for (an = durata_artificiu_degresiva + 1; an <= float.Parse(textbox_perioada_amort_degresiva.Text); an++)
                {
                    suma_ramasa_amortizat = suma_ramasa_amortizat - suma_amortizare_constanta;
                    textbox_amort_degresiva_rezultat.Text += " " + Math.Round(an) + "  |  " + Math.Round(suma_amortizare_constanta, 2) + "  |  " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n";
                }
            }
            else
            {
                durata_artificiu_liniara = Math.Truncate(float.Parse(textbox_perioada_amort_degresiva.Text) / 2) + 1;
                //parcurgere_for();
                durata_artificiu_degresiva = Math.Truncate(float.Parse(textbox_perioada_amort_degresiva.Text) / 2);

                for (an = 1; an <= durata_artificiu_degresiva; an++)
                {
                    suma_amortizare_degresiva = suma_ramasa_amortizat * cota_amort;
                    //.suma_ramasa_amortizat = .suma_ramasa_amortizat - .suma_amortizare_degresiva;
                    suma_ramasa_amortizat = suma_ramasa_amortizat * (1 - cota_amort);
                    textbox_amort_degresiva_rezultat.Text += " " + Math.Round(an) + "  |  " + Math.Round(suma_amortizare_degresiva, 2) + "  |  " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n";
                }

                suma_amortizare_constanta = suma_ramasa_amortizat / durata_artificiu_liniara;

                for (an = durata_artificiu_liniara; an <= float.Parse(textbox_perioada_amort_degresiva.Text); an++)
                {
                    suma_ramasa_amortizat = suma_ramasa_amortizat - suma_amortizare_constanta;
                    textbox_amort_degresiva_rezultat.Text += " " + Math.Round(an) + "  |  " + Math.Round(suma_amortizare_constanta, 2) + "  |  " + Math.Abs(Math.Round(suma_ramasa_amortizat, 2)) + "\n";
                }
            }
        }
        /* private void afiseaza_optiuni_roi_direct(object sender, RoutedEventArgs e)
         {
             buton_direct_apasat = true;
             buton_defalcat_apasat = false;
             suma_investita_roi_label.Visibility = Visibility.Visible;
             suma_investita_roi.Visibility = Visibility.Visible;
             castig_obtinut_roi_label.Visibility = Visibility.Visible;
             castig_obtinut_roi.Visibility = Visibility.Visible;
             roi_rezultat_label.Visibility = Visibility.Visible;
             roi_rezultat.Visibility = Visibility.Visible;
         }

         private void afiseaza_optiuni_roi_defalcat(object sender, RoutedEventArgs e)
         {
             buton_defalcat_apasat = true;
             buton_direct_apasat = false;
         }*/
        private void calculeaza_roi(object sender, RoutedEventArgs e)
        {
            float castig_obt, suma_inv, temp;
            castig_obt = float.Parse(castig_obtinut_roi.Text);
            suma_inv = float.Parse(suma_investita_roi.Text);
            temp = (castig_obt - suma_inv) / suma_inv * 100;
            rezultat = (float)Math.Round(temp, 2);
            //Verificare valori exacte - temp si rezultat - pentru a vedea daca in coloana se petrece "truncherea"
            //MessageBox.Show("temp este " + temp + " iar rezultat este " + rezultat);

            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET ROI = @rezultat WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@rezultat", rezultat);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            MessageBox.Show("ROI este " + rezultat + "!\n" + "Valoare inserata in tabel!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);
            
        }
        private void calc_dob_simpla(object sender, RoutedEventArgs e)
        {
            float suma_finala = 0, dobanda = 0;
            float sum_init = float.Parse(dob_simpla_textbox_suma_initiala.Text);
            float rata_dob = float.Parse(dob_simpla_textbox_rata_dob.Text);
            float perioada = float.Parse(dob_simpla_textbox_perioada.Text);
            if (perioada < 1)
                MessageBox.Show("Ati introdus o perioada eronata dpdv logic!", "Va rugam sa reincercati!", MessageBoxButton.OK, MessageBoxImage.Information);
            else if (1 <= perioada && perioada <= 12)
            {
                suma_finala = (float)Math.Round(sum_init * (1 + rata_dob / 100 * perioada / 12), 3);
                dobanda = (float)Math.Round((suma_finala - sum_init), 3);
            }
            else
                MessageBox.Show("Ati introdus o perioada > 12 luni, iar acest caz este acoperit la optiunea 'Dobanda Compusa'", "Va rugam sa reincercati!", MessageBoxButton.OK, MessageBoxImage.Information);
            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET Dobanda_simpla = @dobanda, Suma_finala_dobanda_simpla = @suma_finala WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@dobanda", dobanda);
            comanda.Parameters.AddWithValue("@suma_finala", suma_finala);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            MessageBox.Show("Dobanda simpla si suma finala au fost inserate!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        private void calc_dob_compusa(object sender, RoutedEventArgs e)
        {
            float suma_finala = 0, dobanda = 0, suma_init = 0, rata_dob = 0, perioada = 0;
            suma_init = float.Parse(dob_compusa_textbox_suma_initiala.Text);
            rata_dob = float.Parse(dob_compusa_textbox_rata_dob.Text);
            perioada = float.Parse(dob_compusa_textbox_perioada.Text);
            if (perioada < 1)
                MessageBox.Show("Ati introdus o perioada eronata dpdv logic!", "Va rugam sa reincercati!", MessageBoxButton.OK, MessageBoxImage.Information);
            else
            {
                suma_finala = (float)Math.Round(suma_init * Math.Pow((1 + rata_dob / 100), perioada), 3);
                dobanda = (float)Math.Round((suma_finala - suma_init), 3);
            }
            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET Dobanda_compusa = @dobanda, Suma_finala_dobanda_compusa = @suma_finala WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@dobanda", dobanda);
            comanda.Parameters.AddWithValue("@suma_finala", suma_finala);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
            MessageBox.Show("Dobanda compusa si suma finala au fost inserate!", "Salvat!", MessageBoxButton.OK, MessageBoxImage.Information);
        }
        
        private void introduce_fluxuri_de_bani(object sender, RoutedEventArgs e)
        {
            textbox_fluxuri_bani = new List<TextBox>();
            //label_fluxuri_bani = new List<Label>();

            //Curatare textboxuri vechi
            foreach(Control item in stackpanel_fluxuri_bani.Children.OfType<TextBox>())
            {
                stackpanel_fluxuri_bani.Children.Clear();
                textbox_fluxuri_bani.Clear();
            }
            /*foreach(Control item in stackpanel_fluxuri_bani.Children.OfType<Label>())
            {
                stackpanel_fluxuri_bani.Children.Clear();
            }*/
            //Generare label-uri si textbox-uri in mod dinamic
            for (i = 0; i < int.Parse(textbox_rir_perioada.Text); i++)
            {
                //Label label = new Label();
                //label.Name = "label_fluxuri_bani_" + i.ToString();

                //textbox.Name = "textbox_fluxuri_bani_" + i.ToString();
                //textbox_fluxuri_bani.Add(textbox);
                //label_fluxuri_bani.Add(label);
                //stackpanel_fluxuri_bani.Children.Insert(i, label);
                TextBox textbox = new TextBox();
                stackpanel_fluxuri_bani.Children.Insert(i, textbox);
                textbox_fluxuri_bani.Add(textbox);
            }

        }
        private void calculeaza_rir(object sender, RoutedEventArgs e)
        {
            double r = 0.01, r_prim = 0.5, r1 = 0, r2 = 0, VAN1 = -1, VAN2 = 1, VAN_temp_RIR, RIR; 

            while (r < 1 && VAN2 > 0)
            {
                VAN_temp_RIR = 0;
                for (i = 0; i < int.Parse(textbox_rir_perioada.Text); i++)
                {
                    VAN_temp_RIR += float.Parse(textbox_fluxuri_bani[i].Text) / (Math.Pow((1 + r), (i+1)));
                }
                VAN2 = VAN_temp_RIR - float.Parse(textbox_rir_suma_investita.Text);
                r2 = r;
                r += 0.01;
            }
            //MessageBox.Show("Am calculat r, care este " + r);
            while (r_prim > 0 && VAN1 < 0)
            {
                VAN_temp_RIR = 0;
                for (i = 0; i < int.Parse(textbox_rir_perioada.Text); i++)
                {
                    VAN_temp_RIR += float.Parse(textbox_fluxuri_bani[i].Text) / (Math.Pow((1 + r_prim), (i+1)));
                }
                VAN1 = VAN_temp_RIR - float.Parse(textbox_rir_suma_investita.Text);
                r1 = r_prim;
                r_prim = r_prim - 0.01;
            }
            //MessageBox.Show("Am calculat r_prim, care este " + r_prim);
            RIR =  Math.Round(((r1 + ((r2 -  r1) *  VAN1) / (VAN1 + Math.Abs(VAN2))) * 100), 2);
            //Afisare RIR - vedem daca a calculat
            MessageBox.Show("RIR este " + RIR + "%");

            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET RIR = @RIR WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@RIR", RIR);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
        }

        private void introduce_fluxuri_de_bani_van(object sender, RoutedEventArgs e)
        {
            textbox_fluxuri_bani = new List<TextBox>();
            
            foreach (Control item in stackpanel_van_fluxuri_bani.Children.OfType<TextBox>())
            {
                stackpanel_van_fluxuri_bani.Children.Clear();
                textbox_fluxuri_bani.Clear();
            }
           
            for (i = 0; i < int.Parse(textbox_van_perioada.Text); i++)
            {
                TextBox textbox = new TextBox();
                stackpanel_van_fluxuri_bani.Children.Insert(i, textbox);
                textbox_fluxuri_bani.Add(textbox);
            }
        }

        private void calculeaza_van(object sender, RoutedEventArgs e)
        {
            float VAN_temp = 0, VAN = 0;
            for (i = 0; i < int.Parse(textbox_van_perioada.Text); i++)
            {
                VAN_temp = VAN_temp + float.Parse(textbox_fluxuri_bani[i].Text) / (float)(Math.Pow((1 + float.Parse(textbox_van_rata_randament.Text)), (i+1)));
            }
            VAN = VAN_temp - float.Parse(textbox_van_suma_investita.Text);
            MessageBox.Show("VAN este " + VAN);

            SqlCommand comanda = new SqlCommand("UPDATE dbo.Situatie_financiara SET VAN = @VAN WHERE ID_Informatie = @row_id", con);
            comanda.CommandType = CommandType.Text;
            comanda.Parameters.AddWithValue("@VAN", VAN);
            comanda.Parameters.AddWithValue("@row_id", row_id);
            con.Open();
            comanda.ExecuteNonQuery();
            con.Close();
            Incarca_Grid();
        }

        //Event handler de la datagrid (SelectionChanged) pentru a introduce datele in textboxuri
        private void Introdu_date_in_textboxuri(object sender, SelectionChangedEventArgs e)
        {
            TabItem optiuni = (TabItem)tabcontrol_optiuni.SelectedItem;
            DataGrid dg = (DataGrid)sender;
            DataRowView rand_selectat = dg.SelectedItem as DataRowView;
            
          if(rand_selectat != null)
          {
            textbox_id.Text = rand_selectat["ID_Informatie"].ToString();
            textbox_data.Text = rand_selectat["Data"].ToString();
            textbox_venituri.Text = rand_selectat["Venituri1"].ToString();
            textbox_venituri_provenite.Text = rand_selectat["Venituri2"].ToString();
            textbox_cheltuieli.Text = rand_selectat["Cheltuieli"].ToString();
            textbox_investitie.Text = rand_selectat["Investitii"].ToString();
            textbox_descriere.Text = rand_selectat["Descriere"].ToString();

            if (optiuni == tabitem_profituri)
            {
                    textbox_profit_venituri_obtinute.Text = rand_selectat["Venituri1"].ToString();
                    textbox_profit_cheltuieli_obtinute.Text = rand_selectat["Cheltuieli"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString()); 
            }
            else if (optiuni == tabitem_amortizare_liniara)
            {
                    textbox_suma_investita_amort_liniara.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());   
            }
            else if (optiuni == tabitem_amortizare_degresiva)
            {   
                    textbox_suma_amort_degresiva.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());   
            }
            else if (optiuni == tabitem_van)
            {
                    textbox_van_suma_investita.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());
            }
            else if (optiuni == tabitem_rir)
            {
                    textbox_rir_suma_investita.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());
            }
            else if (optiuni == tabitem_roi)
            {
                    suma_investita_roi.Text = rand_selectat["Investitii"].ToString();
                    castig_obtinut_roi.Text = rand_selectat["Venituri2"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());   
            }
            else if (optiuni == tabitem_dobanda_simpla)
            {
                    dob_simpla_textbox_suma_initiala.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());
            }
            else if (optiuni == tabitem_dobanda_compusa)
            {   
                    dob_compusa_textbox_suma_initiala.Text = rand_selectat["Investitii"].ToString();
                    row_id = float.Parse(rand_selectat["ID_Informatie"].ToString());   
            }
          }
            
        }
    }
}
